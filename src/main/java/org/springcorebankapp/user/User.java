package org.springcorebankapp.user;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.springcorebankapp.account.Account;

import java.io.Serializable;
import java.util.List;
import java.util.Objects;

/**
 * Entity class representing a user in the SpringCoreBankApp project.
 * <p>
 * This class models a user with a unique login and a list of associated accounts.
 * It is mapped to the "users" table in the database.
 * </p>
 * <p>
 * The class provides basic functionality such as equality comparison,
 * hash code generation, and a string representation of a user object.
 * </p>
 *
 * @author Mukhammed Lolo
 * @version 1.0.0
 */
@NoArgsConstructor
@Getter
@Setter
@Entity
//@RedisHash("User")
@Table(name = "users")
public class User implements Serializable {

    /**
     * The unique identifier for a user.
     * This field is auto-generated by the database as an identity column.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    /**
     * The login of the user.
     * This field is non-nullable and must be unique across all users.
     */
    @Column(name = "login", nullable = false)
    private String login;

    /**
     * A list of accounts associated with the user.
     * This is a one-to-many relationship, with cascade operations and orphan removal enabled.
     * Accounts are lazily loaded when accessed.
     */
    @OneToMany(mappedBy = "userId", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    private List<Account> accountList;

    /**
     * Constructs a new User with the specified login and associated accounts.
     *
     * @param login the login of the user
     * @param accountList the list of accounts associated with the user
     */
    public User(String login, List<Account> accountList) {
        this.login = login;
        this.accountList = accountList;
    }

    /**
     * Compares this user with another object for equality.
     * Two users are considered equal if they have the same ID, login, and associated account list.
     *
     * @param o the object to compare with
     * @return true if the users are equal, false otherwise
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        User user = (User) o;
        return id == user.id && Objects.equals(login, user.login) && Objects.equals(accountList, user.accountList);
    }

    /**
     * Returns a hash code value for the user.
     * The hash code is based on the user's ID, login, and account list.
     *
     * @return a hash code value for this user
     */
    @Override
    public int hashCode() {
        return Objects.hash(id, login, accountList);
    }

    /**
     * Returns a string representation of the user.
     * The string includes the user's ID, login, and associated account list.
     *
     * @return a string representation of the user
     */
    @Override
    public String toString() {
        return "User{" +
                "id=" + id +
                ", login='" + login + '\'' +
                ", accountList=" + accountList +
                '}';
    }
}
